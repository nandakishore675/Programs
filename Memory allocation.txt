#include<stdio.h>
#include<stdlib.h>
struct node
{
    int blockno,blocksize,process;
    struct node *next;
}*start=NULL,*ptr,*ptr1,*ptr2,*ptr3;
void main()
{
    int a[100],b[100],c[100],d[100],i,n,m,max,min;
    printf("\n\tNandakishore P\n\tRET19CS151");
    printf("\n\tEnter the number of blocks : ");
    scanf("%d",&n);
    printf("\n\tEnter the block size of each block(in KB) : ");
    for(i=0;i<n;i++)
    {
        struct node *newnode;
        newnode=(struct node *)malloc(sizeof(struct node));
        newnode->next=NULL;
        newnode->process=-1;
        newnode->blockno=i+1;
        scanf("%d",&newnode->blocksize);
        if(start==NULL)
        {
            start=newnode;
        }
        else
        {
            ptr=start;
            while(ptr->next!=NULL)
            {
                ptr=ptr->next;
            }
            ptr->next=newnode;
        }
    }
    printf("\n\n\tEnter the number of processes : ");
    scanf("%d",&m);
    printf("\n\tEnter the size of each process(in KB) : ");
    for(i=0;i<m;i++)
    {
        scanf("%d",&a[i]);
        b[i]=a[i];
        c[i]=a[i];
        d[i]=a[i];
        
    }
    
    
    //first fit
    

    for(i=0;i<m;i++)
    {
        ptr=start;
        while(ptr!=NULL)
        {
            if(ptr->process==-1 && ptr->blocksize>=a[i])
            {
                ptr->process=a[i];
                b[i]=-1;
                break;
            }
            ptr=ptr->next;
        }
    }
    printf("\n\n******************************************************************\n");
    printf("\n\n\t\t\t\tFIRST FIT\n");
    printf("\n\t\tBlock Number\tBlock Size\tProcess");
    ptr=start;
    while(ptr!=NULL)
    {
        printf("\n\t\t%d\t\t%d",ptr->blockno,ptr->blocksize);
        if(ptr->process==-1)
        {
            printf("\t\tFREE");
        }
        else
        {
            printf("\t\t%d",ptr->process);
        }
        ptr=ptr->next;
    }
    for(i=0;i<m;i++)
    {
        if(b[i]!=-1)
        {
            printf("\n\t\t%dKB process is not allocated...",b[i]);
        }
    }
    
    
   
    //worst fit
    

    ptr=start;
    while(ptr!=NULL)
    {
        ptr->process=-1;
        ptr=ptr->next;
    }
    for(i=0;i<m;i++)
    {
        ptr=start;
        while(ptr!=NULL)
        {
            if(ptr->process==-1)
            {
                max=ptr->blocksize;
                ptr1=ptr;
                while(ptr->next!=NULL)
                {
                    if(ptr->next->blocksize > max && ptr->next->process==-1)
                    {
                        max=ptr->next->blocksize;
                        ptr1=ptr->next;
                    }
                    ptr=ptr->next;
                }
                if(ptr1->process==-1 && ptr1->blocksize>= a[i])
                {
                    ptr1->process=a[i];
                    c[i]=-1;
                    break;
                }
                break;
            }
            ptr=ptr->next;
        }
    }
    printf("\n\n******************************************************************\n");
      printf("\n\n\t\t\t\tWORST FIT\n");
    printf("\n\t\tBlock Number\tBlock Size\tProcess");
    ptr=start;
    while(ptr!=NULL)
    {
        printf("\n\t\t%d\t\t%d",ptr->blockno,ptr->blocksize);
        if(ptr->process==-1)
        {
            printf("\t\tFREE");
        }
        else
        {
            printf("\t\t%d",ptr->process);
        }
        ptr=ptr->next;
    }
    for(i=0;i<m;i++)
    {
        if(c[i]!=-1)
        {
            printf("\n\t\t%dKB process is not allocated...",c[i]);
        }
    }
    

    
    
    //best fit
    
    
    ptr=start;
    while(ptr!=NULL)
    {
        ptr->process=-1;
        ptr=ptr->next;
    }
    for(i=0;i<m;i++)
    {
        ptr=start;
        while(ptr!=NULL)
        {
            if(ptr->process==-1)
            {   
                ptr2=start;
                ptr3=start;
                while(ptr2!=NULL)
                {
                    if(ptr2->process==-1 && ptr2->blocksize >= a[i])
                    {
                        ptr3=ptr2;
                        break;
                    }
                    ptr2=ptr2->next;
                }
                min=ptr2->blocksize;
                while(ptr2->next!=NULL)
                {
                    if(min>ptr2->next->blocksize && ptr2->next->blocksize >= a[i])
                    {
                        min=ptr2->next->blocksize;
                        ptr3=ptr2->next;
                    }
                    ptr2=ptr2->next;
                }
                if(ptr3->process==-1 && ptr3->blocksize >= a[i])
                {
                    ptr3->process=a[i];
                    d[i]=-1;
                    break;
                }
                break;
            }
            ptr=ptr->next;
        }
    }
    printf("\n\n******************************************************************\n");
    printf("\n\n\t\t\t\tBEST FIT\n");
    printf("\n\t\tBlock Number\tBlock Size\tProcess");
    ptr=start;
    while(ptr!=NULL)
    {
        printf("\n\t\t%d\t\t%d",ptr->blockno,ptr->blocksize);
        if(ptr->process==-1)
        {
            printf("\t\tFREE");
        }
        else
        {
            printf("\t\t%d",ptr->process);
        }
        ptr=ptr->next;
    }
    for(i=0;i<m;i++)
    {
        if(d[i]!=-1)
        {
            printf("\n\t\t%dKB process is not allocated...",d[i]);
        }
    }
}

