#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *left, *right;
}*root=NULL;
void preorder(struct node *ptr)
{
    if(ptr != NULL)
    {
        printf("%d ", ptr -> data);
        preorder(ptr -> left);
        preorder(ptr -> right);
    }
}
void inorder(struct node *ptr)
{
    if(ptr != NULL)
    {
        inorder(ptr -> left);
        printf("%d ", ptr -> data);
        inorder(ptr -> right);
    }
}
void postorder(struct node *ptr)
{
    if(ptr != NULL)
    {
        postorder(ptr -> left);
        postorder(ptr -> right);
        printf("%d ", ptr -> data);
    }
}
void insert(int val)
{
    struct node *newnode, *nodeptr, *parentptr;
    newnode = (struct node *)malloc(sizeof(struct node));
    newnode -> data = val;
    newnode -> left = NULL;
    newnode -> right = NULL;
    if(root == NULL)
    root = newnode;
    else
    {
        parentptr = NULL;
        nodeptr = root;
        while(nodeptr != NULL)
        {
            parentptr = nodeptr;
            if(val < nodeptr -> data)
            nodeptr = nodeptr -> left;
            else
            nodeptr = nodeptr -> right;
        }
        if(val < parentptr -> data)
        parentptr -> left = newnode;
        else
        parentptr -> right = newnode;
    }
}
struct node * inordersuccessor(struct node *ptr)
{
    while(ptr != NULL && ptr -> left != NULL)
    ptr = ptr -> left;
    return ptr;
}
struct node * delete(struct node *root, int val)
{
    struct node *temp;
    if(root == NULL)
    printf("\n\tNode not found....");
    else if(val < root -> data)
    root -> left = delete(root -> left, val);
    else if(val > root -> data)
    root -> right = delete(root -> right, val);
    else
    {
        if(root -> left != NULL && root -> right != NULL)
        {
            temp = inordersuccessor(root -> right);
            root -> data = temp -> data;
            root -> right = delete(root -> right, temp -> data);
        }
        else
        {
            temp = root;
            if(root -> left == NULL && root -> right == NULL)
            {
                free(root);
                return NULL;
            }
            else if(root -> left != NULL)
            root = root -> left;
            else
            root = root -> right;
            free(temp);
        }
    }
    return root;
}
struct node * search(struct node *root, int val)
{
    if(root == NULL || root -> data == val)
    return root;
    else if(val > root -> data)
    return search(root -> right, val);
    else
    return search(root -> left, val);
}
void main()
{
    
    int val, ch;
    printf("\n\tBuilding tree:\n");
    do
    {
        if(root == NULL)
        printf("\n\tEnter value of root (0 to exit): ");
        else
        printf("\n\tEnter value of node (0 to exit): ");
        scanf("%d", &val);
        if(val != 0)
        insert(val);
    }while(val != 0);
    printf("\n\n\n\t\t\tMENU");
        printf("\n\t1. Insert\n\t2. Delete\n\t3. Search\n\t4. Preorder traversal\n\t5. Inorder traversal\n\t6. Postorder traversal\n\t7. Exit");
        printf("\n\tEnter choice: ");
        scanf("%d", &ch);
    while(ch!=7)
    {
        if(ch==1)
        {
            printf("\n\tEnter node to insert: ");
            scanf("%d", &val);
            insert(val);
        }
        else if(ch==2)
        {
            if(root != NULL)
            {
                printf("\n\tEnter node to delete: ");
                scanf("%d", &val);
                root = delete(root, val);
            }
            else
            printf("\n\tTree is empty.");
        }
        else if(ch==3)
        {
            printf("\n\tEnter node to search: ");
            scanf("%d", &val);
            if(search(root, val) != NULL)
            printf("\n\tNode found.");
            else
            printf("\n\tNode not found.");
        }
        else if(ch==4)
        {
            if(root != NULL)
            {
                printf("\n\tPreorder traversal: ");
                preorder(root);
            }
            else
            printf("\n\tTree is empty.");
        }
        else if(ch==5)
        {
            if(root != NULL)
            {
                printf("\n\tInorder traversal: ");
                inorder(root);
            }
            else
            printf("\n\tTree is empty.");
        }
        else if(ch==6)
        {
            if(root != NULL)
            {
                printf("\n\tPostorder traversal: ");
                postorder(root);
            }
            else
            printf("\n\tTree is empty.");
        }
        else 
        {
            printf("\n\tinvalid choice...");
        }
        printf("\n\n\t\t\tMENU");
        printf("\n\t1. Insert\n\t2. Delete\n\t3. Search\n\t4. Preorder traversal\n\t5. Inorder traversal\n\t6. Postorder traversal\n\t7. Exit");
        printf("\n\tEnter choice: ");
        scanf("%d", &ch);
    }
}
