#include<stdio.h>
#include<stdlib.h>
struct process
{
        int pid;
        int at;
        int bt;
        int ct;
        int tat;
        int pos;
        int rt;
        int wt;
        int priority;
}p[20],temp;
int n,tq;
float avgtat,avgwt;
void display()
{
        int i;
        printf("Process ID\tArrival Time\tBurst Time\tWaiting Time\t\tTurnaround Time\n");
        for(i=0;i< n;i++)
        {
                printf("P%d\t\t%d\t\t%d\t\t%d\t\t\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].wt,p[i].tat);
        }
        printf("\nAverage Waiting Time: %f", avgwt);
        printf("\nAverage Turnaround Time: %f\n", avgtat);
}
void swap(int i,int j)
{
        temp=p[i];
        p[i]=p[j];
        p[j]=temp;
}
void prioritysort()
{
        int i,j;
        for(i=0;i<n-1;i++)
        {
                for(j=0;j<n-i-1;j++)
                {
                        if(p[j].priority>p[j+1].priority)
                        {
                                swap(i,j);
                        }
                }
        }
}
void btsort()
{
        int i,j;
        for(i=0;i<n-1;i++)
        {
                for(j=0;j<n-i-1;j++)
                {
                        if(p[j].bt>p[j+1].bt)
                        {
                                swap(j,j+1);
                        }
                }
        }
}
void atsort()
{
        int i,j;
        for(i=0;i<n-1;i++)
        {
                for(j=0;j<n-i-1;j++)
                {
                        if(p[j].at>p[j+1].at)
                        {
                                swap(j,j+1);
                        }
                }
        }
}
void pidsort()
{
        int i,j;
        for(i=0;i<n-1;i++)
        {
                for(j=0;j<n-i-1;j++)
                {
                        if(p[j].pid>p[j+1].pid)
                        {
                                swap(j,j+1);
                        }
                }
        }
}
void fcfs()
{
        int i;
        atsort();
        p[0].ct=p[0].at+p[0].bt;
        p[0].tat=p[0].ct-p[0].at;
        p[0].wt=p[0].tat-p[0].bt;
        avgtat+=p[0].tat;
        avgwt+=p[0].wt;
        for(i=1;i<n;i++)
        {
                if(p[i].at<=p[i-1].ct)
                {
                        p[i].ct=p[i-1].ct+p[i].bt;
                }
                else
                {
                        p[i].ct=p[i].at+p[i].bt;
                }
                p[i].tat=p[i].ct-p[i].at;
                p[i].wt=p[i].tat-p[i].bt;
                avgwt+=p[i].wt;
                avgtat+=p[i].tat;
        }
        avgtat/=n;
        avgwt/=n;
        pidsort();
        printf("\nFCFS: \n");
        display();
}
void sjf()
{
        int pct, sbt, loc, i, j, f, flag = 0;
        for(i=0; i<n; i++)
        {
                if(p[i].at>0)
                        flag=1;
        }
        if(flag == 1)
                atsort();
        else
                btsort();
        p[0].ct = p[0].at + p[0].bt;
        p[0].tat = p[0].ct - p[0].at;
        p[0].wt = p[0].tat - p[0].bt;
        avgtat= p[0].tat;
        avgwt= p[0].wt;
        for(i = 1; i< n; i++)
        {
                pct = p[i - 1].ct;
                sbt= 100;
                f= 0;
                for(j = i; j< n; j++)
                {
                        if(p[j].at<= pct &&  p[j].bt< sbt)
                        {
                                f = 1;
                                loc = j;
                                sbt = p[j].bt;
                        }
                        if(f == 0)
                        {
                                if(p[j].at>= pct &&  p[j].bt< sbt)
                                {
                                        loc = j;
                                        sbt = p[j].bt;
                                }
                        }
                }
                if(f == 1)
                        p[loc].ct = pct + p[loc].bt;
                else
                        p[loc].ct = p[loc].at+ p[loc].bt;
                p[loc].tat = p[loc].ct - p[loc].at;
                p[loc].wt = p[loc].tat - p[loc].bt;
                swap(loc, i);
                avgtat += p[i].tat;
                avgwt += p[i].wt;
        }
        avgtat /= n;
        avgwt/= n;
        pidsort();
        printf("\nSJF:\n");
        display();
}
void prio()
{
        int i, j, pct, highest, loc, f, flag = 0;
        for(i = 0; i< n; i++)
        {
                if(p[i].at> 0)
                        flag=1;
        }
        if(flag == 1)
                atsort();
        else
                prioritysort();
        p[0].ct = p[0].at+ p[0].bt;
        p[0].tat = p[0].ct - p[0].at;
        p[0].wt = p[0].tat - p[0].bt;
        avgtat= p[0].tat;
        avgwt= p[0].wt;
        for(i = 1; i< n; i++)
        {
                pct = p[i-1].ct;
                highest = 20;
                f = 0;
                for(j = i; j<n; j++)
                {
                        if(p[j].at<=pct && p[j].priority<highest)
                        {
                                f = 1;
                                loc = j;
                                highest = p[j].priority;
                        }
                        if(f == 0)
                        {
                                if(p[j].at>= pct &&  p[j].priority<highest)
                                {
                                        loc = j;
                                        highest=p[j].priority;
                                }
                        }
                }
                if(f == 1)
                        p[loc].ct= pct + p[loc].bt;
                else
                        p[loc].ct = p[loc].at + p[loc].bt;
                p[loc].tat = p[loc].ct - p[loc].at;
                p[loc].wt = p[loc].tat - p[loc].bt;
                swap(loc, i);
                avgtat+= p[i].tat;
                avgwt+= p[i].wt;
        }
        avgtat /= n;
        avgwt /= n;
        pidsort();
        printf("\nPriority Scheduling:\n");
        display();
}
int fin()
{
        int i;
        for(i = 0; i<n; i++)
        {
                if(p[i].rt != 0)
                        return 0;
        }
        return 1;
}
void rr()
{
        int i, small, c = 0, first, clk = 0, position = 1;
        printf("\nEnter time quantum: ");
        scanf("%d",&tq);
        for(i = 0; i<n; i++)
                p[i].rt = p[i].bt;
        atsort();
        while(fin() == 0)
        {
                for(i = 0; i<n; i++)
                {
                        if(p[i].at == clk)
                                p[i].pos = position++;
                }
                if(c == tq)
                {
                        c = 0;
                        p[first].pos = position++;
                }
                for(i = 0, small = 100; i<n; i++)
                {
                        if(p[i].pos<small &&  p[i].pos != 0 &&  p[i].rt != 0)
                        {
                                first = i;
                                small = p[i].pos;
                        }
                }
                clk++;
                p[first].rt--;
                c++;
                if(p[first].rt == 0)
                {
                        c = 0;
                        p[first].pos = 0;
                        p[first].ct = clk;
                        p[first].tat = p[first].ct - p[first].at;
                        p[first].wt = p[first].tat - p[first].bt;
                        avgtat += p[first].tat;
                        avgwt += p[first].wt;
                }
        }
        avgtat /= n;
        avgwt /= n;
        pidsort();
        printf("\nRound Robin:\n");
        display();
}
void main()
{
        int i,choice;
        printf("\nNANDAKISHORE-----RET19CS151----ROLL NUMBER - 07");
        printf("\n\n\n1.FCFS  2.SJF  3.PRIORITY  4.ROUND ROBIN  5.EXIT");
        printf("\nEnter the choice : ");
        scanf("%d",&choice);
        while(choice!=5)
        {
                printf("\nEnter the number of processes : ");
                scanf("%d",&n);
                for(i=0;i<n;i++)
                {
                        p[i].pid=i+1;
                        printf("\nEnter the arrival time of process p%d : ",i+1);
                        scanf("%d",&p[i].at);
                        printf("\nEnter the burst time of process p%d : ",i+1);
                        scanf("%d",&p[i].bt);
                        printf("\nEnter the priority of process p%d : ",i+1);
                        scanf("%d",&p[i].priority);
                }
                if(choice==1)
                {
                        fcfs();
                }
                else if(choice==2)
                {
                        sjf();
                }
                else if(choice==3)
                {
                        prio();
                }
                else if(choice==4)
                {
                        rr();
                }
                else
                {
                        printf("\nInvalid choice");
                }
                printf("\n\n\n1.FCFS  2.SJF  3.PRIORITY  4.ROUND ROBIN  5.EXIT");
                printf("\nEnter the choice : ");
                scanf("%d",&choice);
                avgwt=avgtat=0.0;
                for(i=0;i<n;i++)
                {
                        p[i].tat=0;
                        p[i].wt=0;
                        p[i].ct=0;
                        p[i].pos=0;
                        p[i].rt=p[i].bt;
                }
        }
}
