#include <stdio.h>
#include<stdlib.h>
struct node
{
    int processno,beg,end;
    struct node *next;
}*start=NULL,*ptr=NULL;
void fcfs(int[],int[],int[],int[],int[],int);
void sjf(int[],int[],int[],int[],int[],int[],int);
void priorityfun(int[],int[],int[],int[],int[],int[],int[],int[],int);
void roundrobin(int[],int[],int[],int[],int[],int[],int,int);
void main()
{
    int n,m,tq,at[100],at1[100],at2[100],at3[100],at4[100],at5[100],bt[100],bt1[100],bt2[100],bt3[100],bt4[100],wt[100],priority[100],priority1[100],ta[100],i;
    printf("\n\tEnter the number of processes : ");
    scanf("%d",&n);
    m=n;
    for(i=0;i<n;i++)
    {
        printf("\tEnter the arrival time of process %d :",i+1);
        scanf("%d",&at[i]);
        at1[i]=at[i];
        at2[i]=at[i];
        at3[i]=at[i];
        at4[i]=at[i];
        at5[i]=at[i];
        printf("\tEnter the burst time time of process %d :",i+1);
        scanf("%d",&bt[i]);
        bt1[i]=bt[i];
        bt2[i]=bt[i];
        bt3[i]=bt[i];
        bt4[i]=bt[i];
        printf("\tEnter the priority of process %d :",i+1);
        scanf("%d",&priority[i]);
        priority1[i]=priority[i];
    }
    printf("\n\t\n\tEnter the time quantum for roundrobin scheduling(ms) : ");
    scanf("%d",&tq);
    printf("\n*********************************************************************************************\n");
    printf("\n\tProcess ID          Arrival Time(ms)            Burst Time(ms)          Priority\n");
    printf("\t________________________________________________________________________________");
    for(i=0;i<n;i++)
    {
        printf("\n\t P%d\t\t\t%d\t\t\t%d\t\t\t%d",i+1,at[i],bt[i],priority[i]);
    }
    printf("\n\t________________________________________________________________________________");
    
    
    //fcfs
    fcfs(at,at1,bt,wt,ta,n);
    
    //priority
    priorityfun(at3,at3,bt2,bt2,priority,priority1,wt,ta,n);
    
    //round robin
    roundrobin(at4,at4,bt3,bt3,wt,ta,n,tq);
    
    //sjf
    sjf(at2,at5,bt1,bt4,wt,ta,m);
    
}
void roundrobin(int at[],int at1[],int bt[],int bt1[],int wt[],int ta[],int n,int tq)
{
    float sumwt=0,sumta=0,avgwt=0,avgta=0;
    int i,temp,m,j,k,count,rq[100],l=0,max;
    for(i=0;i<100;i++)
    {
        rq[i]=0;
    }
    m=n;
    count=0;
    i=0;
    j=0;
    start=NULL;
    do
    {
        if(count==0)
        {
            rq[j]=1;
            while(at[i+1]==at[rq[j]-1])
            {
                rq[j++]=i+2;
                i++;
            }
            struct node *newnode=(struct node *)malloc(sizeof(struct node));
            newnode->next=NULL;
            newnode->processno=rq[0];
            newnode->beg=at[rq[0]-1];
            if(bt[rq[0]-1]<=tq)
            {
                newnode->end=bt[rq[0]-1];
                i=0;
                while(rq[i]!=0)
                {
                    rq[i]=rq[i+1];
                    i++;
                }
            }
            else
            {
                newnode->end=tq;
                i=0;
                while(rq[i]!=0)
                {
                    rq[i]=rq[i+1];
                    i++;
                }
                j=1;
                i=0;
                while(at[j]<=tq)
                {
                    rq[i]=j+1;
                    j++;
                    i++;
                }
                rq[i]=1;
                bt[0]=bt[0]-tq;
            }
            if(start==NULL)
            {
                start=newnode;
            }
            else
            {
                ptr=start;
                while(ptr->next!=NULL)
                {
                    ptr=ptr->next;
                }
                ptr->next=newnode;
            }
            count++;
        }
        else
        {
            l=1;
            while(rq[0]!=0)
            {
                struct node *newnode=(struct node *)malloc(sizeof(struct node));
                newnode->next=NULL;
                newnode->processno=rq[0];
                temp=rq[0];
                if(start==NULL)
                {
                    start=newnode;
                    newnode->beg=at[rq[0]-1];
                    if(bt[rq[0]-1]<=tq)
                    {
                        newnode->end=bt[rq[0]-1];
                    }
                    else
                    {
                        newnode->end=tq;
                    }
                }
                else
                {
                    ptr=start;
                    while(ptr->next!=NULL)
                    {
                        ptr=ptr->next;
                    }
                    ptr->next=newnode;
                    newnode->beg=ptr->end;
                    if(bt[rq[0]-1]<=tq)
                    {
                        newnode->end=(newnode->beg)+bt[rq[0]-1];
                    }
                    else
                    {
                        newnode->end=(newnode->beg)+tq;
                    }
                }
                if(bt[rq[0]-1]<=tq)
                {
                    k=0;
                    while(rq[k]!=0)
                    {
                        rq[k]=rq[k+1];
                        k++;
                    }
                    j=0;
                    max=rq[0];
                    while(rq[j]!=0)
                    {
                        if(max<rq[j])
                        {
                            max=rq[j];
                        }
                        j++;
                    }
                    j=1;
                    i=0;
                    while(max<m && max!=0 && at[max]>(l*tq) && at[max]<=((l+1)*tq))
                    {
                        k=0;
                        while(rq[k]!=0)
                        {
                            k++;
                        }
                        rq[k]=max+1;
                        max++;
                        k++;
                    }
                    l++;
                }
                else
                {
                    k=0;
                    while(rq[k]!=0)
                    {
                        rq[k]=rq[k+1];
                        k++;
                    }
                    j=0;
                    max=rq[0];
                    while(rq[j]!=0)
                    {
                        if(max<rq[j])
                        {
                            max=rq[j];
                        }
                        j++;
                    }
                    j=1;
                    i=0;
                    while(max<m && max!=0 && at[max]>(l*tq) && at[max]<=((l+1)*tq))
                    {
                        k=0;
                        while(rq[k]!=0)
                        {
                            k++;
                        }
                        rq[k]=max+1;
                        max++;
                        k++;
                    }
                    l++;
                    rq[k]=temp;
                    bt[temp-1]=bt[temp-1]-tq;
                }
            }
        }
    }while(rq[0]!=0);
    i=0;
    j=0;
    k=0;
    struct node *ptr1=NULL;
    for(i=0;i<m;i++)
    {
        ptr=start;
        while(ptr!=NULL)
        {
            if(ptr->processno==i+1)
            {
                ptr1=ptr;
            }
            ptr=ptr->next;
        }
        ta[i]=(ptr1->end)-at1[i];
        sumta+=ta[i];
    }
    avgta=sumta/m;
    struct node *ptr2=NULL;
    for(i=0;i<m;i++)
    {
        ptr=start;
        while(ptr!=NULL)
        {
            if(ptr->processno==i+1)
            {
                ptr1=ptr->next;
                ptr2=ptr;
                wt[i]=(ptr->beg)-at1[i];
                break;
            }
            ptr=ptr->next;
        }
        while(ptr1!=NULL)
        {
            if(ptr1->processno==i+1)
            {
                wt[i]=wt[i]+((ptr1->beg)-(ptr2->end));
            }
            ptr1=ptr1->next;
        }
        sumwt+=wt[i];
    }
    avgwt=sumwt/m;
    printf("\n\n\n\n\n\t\t\t\tROUND ROBIN  :\n");
    printf("\n\tProcess ID          Waiting Time(ms)            Turnaround Time(ms)\n");
    printf("\t___________________________________________________________________________________");
    for(i=0;i<m;i++)
    {
        printf("\n\t P%d\t\t\t%d\t\t\t%d",i+1,wt[i],ta[i]);
    }
    printf("\n\t___________________________________________________________________________________");
    printf("\n\taverage waiting time : %fms",avgwt);
    printf("\n\taverage turnaround time : %fms",avgta);
}
void priorityfun(int at[],int at1[],int bt[],int bt1[],int priority[],int priority1[],int wt[],int ta[],int n)
{
    float sumwt=0,sumta=0,avgwt=0,avgta=0;
    int i=0,j,k,p,temp,count=0,m,q,x,loc;
    m=n;
    x=0;
    p=priority[0];
    start=NULL;
    while(x<m)
    {
        if(count==0)
        {
            while(at[i]==at[i+1])
            {
                if(p>priority[i+1])
                {
                    p=priority[i+1];
                }
            }
            for(k=0;k<m;k++)
            {
                if(p==priority[k])
                break;
            }
            struct node *newnode=(struct node *)malloc(sizeof(struct node));
            newnode->next=NULL;
            newnode->processno=k+1;
            if(start==NULL)
            {
                start=newnode;
                newnode->beg=at[k];
                newnode->end=at[k]+bt[k];
            }
            else
            {
                ptr=start;
                while(ptr->next!=NULL)
                {
                    ptr=ptr->next;
                }
                ptr->next=newnode;
                newnode->beg=ptr->end;
                newnode->end=(newnode->beg)+bt[k];
            }
            count++;
            temp=k;
            while(temp<n)
            {
                at[temp]=at[temp+1];
                bt[temp]=bt[temp+1];
                priority[temp]=priority[temp+1];
                temp++;
            }
            n--;
        }
        else
        {
            ptr=start;
            while(ptr->next!=NULL)
            {
                ptr=ptr->next;
            }
            p=100;
            i=0;
            while(at[i]<=(ptr->end) && i<n)
            {
                if(p>priority[i])
                {
                    p=priority[i];
                    q=at[i];
                }
                i++;
            }
            for(temp=0;temp<n;temp++)
            {
                if(p==priority[temp] && q==at[temp])
                break;
            }
            while(temp<n)
            {
                at[temp]=at[temp+1];
                bt[temp]=bt[temp+1];
                priority[temp]=priority[temp+1];
                temp++;
            }
            n--;
            for(loc=0;loc<m;loc++)
            {
                if(p==priority1[loc] && q==at1[loc])
                break;
            }
            struct node *newnode=(struct node *)malloc(sizeof(struct node));
            newnode->next=NULL;
            newnode->processno=loc+1;
            if(start==NULL)
            {
                start=newnode;
                newnode->beg=at1[loc];
                newnode->end=bt1[loc];
            }
            else
            {
                ptr=start;
                while(ptr->next!=NULL)
                {
                    ptr=ptr->next;
                }
                ptr->next=newnode;
                newnode->beg=ptr->end;
                newnode->end=(newnode->beg)+bt1[loc];
            }
        }
        x++;
    }
    ptr=start;
    while(ptr!=NULL)
    {
        ta[(ptr->processno)-1]=(ptr->end)-at1[(ptr->processno)-1];
        wt[(ptr->processno)-1]=(ptr->beg)-at1[(ptr->processno)-1];
        ptr=ptr->next;
    }
    for(i=0;i<m;i++)
    {
        sumwt+=wt[i];
        sumta+=ta[i];
    }
    avgwt=sumwt/m;
    avgta=sumta/m;
    printf("\n\n\n\n\n\t\t\t\tPRIORITY SCHEDULING :\n");
    printf("\n\tProcess ID          Waiting Time(ms)            Turnaround Time(ms)\n");
    printf("\t___________________________________________________________________________________");
    for(i=0;i<m;i++)
    {
        printf("\n\t P%d\t\t\t%d\t\t\t%d",i+1,wt[i],ta[i]);
    }
    printf("\n\t___________________________________________________________________________________");
    printf("\n\taverage waiting time : %fms",avgwt);
    printf("\n\taverage turnaround time : %fms",avgta);
}
void sjf(int at[],int at1[],int bt[],int bt1[],int wt[],int ta[],int n)
{
    float sumwt=0,sumta=0,avgwt=0,avgta=0;
    int i,j,k,mina,minb,max,m,loc,temp,x,count,l;
    l=0;
    x=0;
    j=0;
    count=0;
    m=n;
    start=NULL;
    max=at[0];
    for(i=0;i<m;i++)
    {
        if(max<at[i])
        {
            max=at[i];
        }
    }
    x=at1[0];   
    while(x<=max && l<m)
    {
        i=0;
        minb=bt[i];
        while(at[i]<=x && i<n)
        {
            if(minb>bt[i])
            {
                minb=bt[i];
            }
            i++;
        }
        if(count!=0)
        {
            i=0;
            ptr=start;
            while(ptr->next!=NULL)
            {
                ptr=ptr->next;
            }
            while(i<n && at[i]<=(ptr->end))
            {
                if(minb>bt[i])
                {
                    minb=bt[i];
                }
                i++;
            }
        }
        count++;
        for(loc=0;loc<m;loc++)
        {
            if(minb==bt[loc])
            break;
        }   
        temp=loc;
        struct node *newnode=(struct node*)malloc(sizeof(struct node));
        for(k=0;k<m;k++)
        {
            if(at1[k]==at[loc] && bt1[k]==bt[loc])
            break;
        }
        newnode->processno=k+1;
        newnode->next=NULL;
        if(start==NULL)
        {
            start=newnode;
            newnode->beg=at[loc];
            newnode->end=at[loc]+bt[loc];
        }
        else
        {
            ptr=start;
            while(ptr->next!=NULL)
            {
                ptr=ptr->next;
            }
            ptr->next=newnode;
            newnode->beg=ptr->end;
            newnode->end=(newnode->beg)+bt[loc];
        }
        while(temp<n)
        {
            at[temp]=at[temp+1];
            bt[temp]=bt[temp+1];
            temp++;
        }
        n--;
        l++;
        x=at1[l];
    }
    ptr=start;
    while(ptr!=NULL)
    {
        ta[(ptr->processno)-1]=(ptr->end)-at1[(ptr->processno)-1];
        wt[(ptr->processno)-1]=(ptr->beg)-at1[(ptr->processno)-1];
        ptr=ptr->next;
    }
    for(i=0;i<m;i++)
    {
        sumwt+=wt[i];
        sumta+=ta[i];
    }
    avgwt=sumwt/m;
    avgta=sumta/m;
    printf("\n\n\n\n\n\t\t\t\tSJF :\n");
    printf("\n\tProcess ID          Waiting Time(ms)            Turnaround Time(ms)\n");
    printf("\t__________________________________________________________________________________");
    for(i=0;i<m;i++)
    {
        printf("\n\t P%d\t\t\t%d\t\t\t%d",i+1,wt[i],ta[i]);
    }
    printf("\n\t__________________________________________________________________________________");
    printf("\n\taverage waiting time : %fms",avgwt);
    printf("\n\taverage turnaround time : %fms",avgta);
}
void fcfs(int at[],int at1[],int bt[],int wt[],int ta[],int n)
{
    int i,j,m,min,loc,temp;
    float sumwt=0,sumta=0,avgwt=0,avgta=0;
    j=0;
    m=n;
    while(j<m)
    {
        min=at[0];
        for(i=0;i<n;i++)
        {
            if(min>at[i])
            {
                min=at[i];
            }
        }
        for(loc=0;loc<n;loc++)
        {
            if(min==at[loc])
                break;
        }
        temp=loc;
        struct node *newnode=(struct node*)malloc(sizeof(struct node));
        newnode->next=NULL;
        newnode->processno=j+1;
        if(start==NULL)
        {
            start=newnode;
            newnode->beg=at[loc];
            newnode->end=at[loc]+bt[loc];
        }
        else
        {
            ptr=start;
            while(ptr->next!=NULL)
            {
                ptr=ptr->next;
            }
            ptr->next=newnode;
            newnode->beg=ptr->end;
            newnode->end=(newnode->beg)+bt[loc];
        }
        while(temp<n)
        {
            at[temp]=at[temp+1];
            bt[temp]=bt[temp+1];
            temp++;
        }
        n--;
        j++;
    }
    ptr=start;
    while(ptr!=NULL)
    {
        ta[(ptr->processno)-1]=(ptr->end)-at1[(ptr->processno)-1];
        wt[(ptr->processno)-1]=(ptr->beg)-at1[(ptr->processno)-1];
        ptr=ptr->next;
    }
    for(i=0;i<m;i++)
    {
        sumwt+=wt[i];
        sumta+=ta[i];
    }
    avgwt=sumwt/m;
    avgta=sumta/m;
    printf("\n\n\n\n\n\t\t\t\tFCFS :\n");
    printf("\n\tProcess ID          Waiting Time(ms)            Turnaround Time(ms)\n");
    printf("\t__________________________________________________________________________________");
    for(i=0;i<m;i++)
    {
        printf("\n\t P%d\t\t\t%d\t\t\t%d",i+1,wt[i],ta[i]);
    }
    printf("\n\t__________________________________________________________________________________");
    printf("\n\taverage waiting time : %fms",avgwt);
    printf("\n\taverage turnaround time : %fms",avgta);
}
